{
  "Parameters": {
    "1stAvailabilityZone": {
      "Type": "AWS::EC2::AvailabilityZone::Name",
      "Description": "Enter the first Availability Zone for HA"
    },
    "2ndAvailabilityZone": {
      "Type": "AWS::EC2::AvailabilityZone::Name",
      "Description": "Enter the second Availability Zone for HA"
    },
    "CidrBlock": {
      "Type": "String",
      "Description": "Cidr Block for VPC"
    }
  },
  "Resources": {
    "vpcDemogo": {
      "Type": "AWS::EC2::VPC",
      "Properties": {
        "CidrBlock": {
          "Ref": "CidrBlock"
        },
        "EnableDnsHostnames": true,
        "EnableDnsSupport": true,
        "InstanceTenancy": "default",
        "Tags": [
          {
            "Key": "Name",
            "Value": "vpc-builders"
          }
        ]
      }
    },
    "vpcDemogoIGW": {
      "Type": "AWS::EC2::InternetGateway",
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": "vpc-builders"
          }
        ]
      }
    },
    "vpcDemogoGatewayAttachment": {
      "Type": "AWS::EC2::VPCGatewayAttachment",
      "Properties": {
        "VpcId": {
          "Ref": "vpcDemogo"
        },
        "InternetGatewayId": {
          "Ref": "vpcDemogoIGW"
        }
      }
    },
    "publicSubnet1": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {
          "Ref": "vpcDemogo"
        },
        "AvailabilityZone": {
          "Ref": "1stAvailabilityZone"
        },
        "CidrBlock": {
          "Fn::Select" : [ 0, {
            "Fn::Cidr" : [{
              "Ref": "CidrBlock"
            }, 4, 6 ]}
          ]
        },
        "MapPublicIpOnLaunch": true,
        "Tags": [
          {
            "Key": "subnet-type",
            "Value": "Public"
          },
          {
            "Key": "Name",
            "Value": "sbn-publicSubnet1"
          }
        ]
      }
    },
    "publicSubnet2": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {
          "Ref": "vpcDemogo"
        },
        "AvailabilityZone": {
          "Ref": "2ndAvailabilityZone"
        },
        "CidrBlock": {
          "Fn::Select" : [ 1, {
            "Fn::Cidr" : [{
              "Ref": "CidrBlock"
            }, 4, 6 ]}
          ]
        },
        "MapPublicIpOnLaunch": true,
        "Tags": [
          {
            "Key": "subnet-type",
            "Value": "Public"
          },
          {
            "Key": "Name",
            "Value": "sbn-publicSubnet2"
          }
        ]
      }
    },
    "privateSubnet1": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {
          "Ref": "vpcDemogo"
        },
        "AvailabilityZone": {
          "Ref": "1stAvailabilityZone"
        },
        "CidrBlock": {
          "Fn::Select" : [ 2, {
            "Fn::Cidr" : [{
              "Ref": "CidrBlock"
            }, 4, 6 ]}
          ]
        },
        "MapPublicIpOnLaunch": false,
        "Tags": [
          {
            "Key": "subnet-type",
            "Value": "Private"
          },
          {
            "Key": "Name",
            "Value": "sbn-private-appSubnet1"
          }
        ]
      }
    },
    "privateSubnet2": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {
          "Ref": "vpcDemogo"
        },
        "AvailabilityZone": {
          "Ref": "2ndAvailabilityZone"
        },
        "CidrBlock": {
          "Fn::Select" : [ 3, {
            "Fn::Cidr" : [{
              "Ref": "CidrBlock"
            }, 4, 6 ]}
          ]
        },
        "MapPublicIpOnLaunch": false,
        "Tags": [
          {
            "Key": "subnet-type",
            "Value": "Private"
          },
          {
            "Key": "Name",
            "Value": "sbn-private-appSubnet2"
          }
        ]
      }
    },
    "publicSubnet1RouteTable": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "vpcDemogo"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "sbn-publicSubnet1"
          }
        ]
      }
    },
    "publicSubnet1RouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": {
          "Ref": "publicSubnet1RouteTable"
        },
        "SubnetId": {
          "Ref": "publicSubnet1"
        }
      }
    },
    "publicSubnet1DefaultRoute": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": {
          "Ref": "publicSubnet1RouteTable"
        },
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": {
          "Ref": "vpcDemogoIGW"
        }
      },
      "DependsOn": [
        "vpcDemogoGatewayAttachment"
      ]
    },
    "publicSubnet1EIP": {
      "Type": "AWS::EC2::EIP",
      "Properties": {
        "Domain": "vpc",
        "Tags": [
          {
            "Key": "Name",
            "Value": "sbn-publicSubnet1"
          }
        ]
      }
    },
    "vpcDemogoNGW": {
      "Type": "AWS::EC2::NatGateway",
      "Properties": {
        "SubnetId": {
          "Ref": "publicSubnet1"
        },
        "AllocationId": {
          "Fn::GetAtt": [
            "publicSubnet1EIP",
            "AllocationId"
          ]
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "sbn-publicSubnet1"
          }
        ]
      }
    },
    "publicSubnet2RouteTable": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "vpcDemogo"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "sbn-publicSubnet2"
          }
        ]
      }
    },
    "publicSubnet2RouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": {
          "Ref": "publicSubnet2RouteTable"
        },
        "SubnetId": {
          "Ref": "publicSubnet2"
        }
      }
    },
    "publicSubnet2DefaultRoute": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": {
          "Ref": "publicSubnet2RouteTable"
        },
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": {
          "Ref": "vpcDemogoIGW"
        }
      },
      "DependsOn": [
        "vpcDemogoGatewayAttachment"
      ]
    },
    "privateSubnet1RouteTable": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "vpcDemogo"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "sbn-private-appSubnet1"
          }
        ]
      }
    },
    "privateSubnet1RouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": {
          "Ref": "privateSubnet1RouteTable"
        },
        "SubnetId": {
          "Ref": "privateSubnet1"
        }
      }
    },
    "privateSubnet1DefaultRoute": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": {
          "Ref": "privateSubnet1RouteTable"
        },
        "DestinationCidrBlock": "0.0.0.0/0",
        "NatGatewayId": {
          "Ref": "vpcDemogoNGW"
        }
      }
    },
    "privateSubnet2RouteTable": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "vpcDemogo"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "sbn-private-appSubnet2"
          }
        ]
      }
    },
    "privateSubnet2RouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": {
          "Ref": "privateSubnet2RouteTable"
        },
        "SubnetId": {
          "Ref": "privateSubnet2"
        }
      }
    },
    "privateSubnet2DefaultRoute": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": {
          "Ref": "privateSubnet2RouteTable"
        },
        "DestinationCidrBlock": "0.0.0.0/0",
        "NatGatewayId": {
          "Ref": "vpcDemogoNGW"
        }
      }
    },
    "publicALB": {
      "Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
      "Properties": {
        "LoadBalancerAttributes": [
          {
            "Key": "deletion_protection.enabled",
            "Value": "false"
          }
        ],
        "Scheme": "internet-facing",
        "SecurityGroups": [
          {
            "Fn::GetAtt": [
              "publicALBSecurityGroup",
              "GroupId"
            ]
          }
        ],
        "Subnets": [
          {
            "Ref": "publicSubnet1"
          },
          {
            "Ref": "publicSubnet2"
          }
        ],
        "Type": "application"
      },
      "DependsOn": [
        "publicSubnet1DefaultRoute",
        "publicSubnet2DefaultRoute"
      ]
    },
    "publicALBSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Automatically created Security Group for Public ALB",
        "SecurityGroupIngress": [
          {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow from anyone on port 8080",
            "FromPort": 8080,
            "IpProtocol": "tcp",
            "ToPort": 8080
          },
          {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow from anyone on port 8090(Test port)",
            "FromPort": 8090,
            "IpProtocol": "tcp",
            "ToPort": 8090
          }
        ],
        "VpcId": {
          "Ref": "vpcDemogo"
        }
      }
    },
    "publicALBSecurityGroupEgress": {
      "Type": "AWS::EC2::SecurityGroupEgress",
      "Properties": {
        "GroupId": {
          "Fn::GetAtt": [
            "publicALBSecurityGroup",
            "GroupId"
          ]
        },
        "IpProtocol": "tcp",
        "Description": "Load balancer to target",
        "DestinationSecurityGroupId": {
          "Fn::GetAtt": [
            "appServiceSecurityGroup",
            "GroupId"
          ]
        },
        "FromPort": 0,
        "ToPort": 65535
      }
    },
    "ecsExecutionRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "ecs-tasks.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "RoleName": "EcsExecutionRole-Builders"
      }
    },
    "ecsExecutionRoleDefaultPolicy": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "ecr:BatchCheckLayerAvailability",
                "ecr:BatchGetImage",
                "ecr:GetAuthorizationToken",
                "ecr:GetDownloadUrlForLayer",
                "logs:CreateLogGroup",
                "logs:CreateLogStream",
                "logs:PutLogEvents"
              ],
              "Effect": "Allow",
              "Resource": "*"
            },
            {
              "Action": [
                "ecr:BatchCheckLayerAvailability",
                "ecr:BatchGetImage",
                "ecr:GetDownloadUrlForLayer"
              ],
              "Effect": "Allow",
              "Resource": "*"
            },
            {
              "Action": [
                "logs:CreateLogStream",
                "logs:PutLogEvents"
              ],
              "Effect": "Allow",
              "Resource": "*"
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "EcsExecutionRoleDefaultPolicy",
        "Roles": [
          {
            "Ref": "ecsExecutionRole"
          }
        ]
      }
    },
    "devOpsRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com",
                  "codebuild.amazonaws.com",
                  "codedeploy.amazonaws.com",
                  "codepipeline.amazonaws.com",
                  "ecs-tasks.amazonaws.com"
                ]
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy",
          "arn:aws:iam::aws:policy/AmazonSSMReadOnlyAccess"
        ],
        "RoleName": "DevOpsRole-Builders"
      }
    },
    "devOpsRoleDefaultPolicy": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "ecr:BatchCheckLayerAvailability",
                "ecr:BatchGetImage",
                "ecr:GetAuthorizationToken",
                "ecr:GetDownloadUrlForLayer",
                "logs:CreateLogGroup",
                "logs:CreateLogStream",
                "logs:PutLogEvents"
              ],
              "Effect": "Allow",
              "Resource": "*"
            },
            {
              "Action": [
                "ecr:BatchCheckLayerAvailability",
                "ecr:BatchGetImage",
                "ecr:GetDownloadUrlForLayer"
              ],
              "Effect": "Allow",
              "Resource": "*"
            },
            {
              "Action": [
                "logs:CreateLogStream",
                "logs:PutLogEvents"
              ],
              "Effect": "Allow",
              "Resource": "*"
            },
            {
              "Action": [
                "cloudfront:CreateInvalidation",
                "codebuild:*",
                "codedeploy:*",
                "codepipeline:*",
                "devicefarm:CreateTestGridUrl",
                "ecr-public:*",
                "ecr:*",
                "ecs:*",
                "elasticloadbalancing:*",
                "iam:PassRole",
                "logs:CreateLogGroup",
                "logs:CreateLogStream",
                "logs:PutLogEvents",
                "s3:*",
                "sts:AssumeRole",
                "Lambda:InvokeFunction"
              ],
              "Effect": "Allow",
              "Resource": "*"
            },
            {
              "Action": [
                "logs:CreateLogGroup",
                "logs:CreateLogStream",
                "logs:PutLogEvents"
              ],
              "Effect": "Allow",
              "Resource": "*"
            },
            {
              "Action": [
                "codebuild:BatchPutCodeCoverages",
                "codebuild:BatchPutTestCases",
                "codebuild:CreateReport",
                "codebuild:CreateReportGroup",
                "codebuild:UpdateReport"
              ],
              "Effect": "Allow",
              "Resource": "*"
            },
            {
              "Action": [
                "s3:Abort*",
                "s3:DeleteObject*",
                "s3:GetBucket*",
                "s3:GetObject*",
                "s3:List*",
                "s3:PutObject",
                "s3:PutObjectLegalHold",
                "s3:PutObjectRetention",
                "s3:PutObjectTagging",
                "s3:PutObjectVersionTagging"
              ],
              "Effect": "Allow",
              "Resource": "*"
            },
            {
              "Action": [
                "kms:Decrypt",
                "kms:DescribeKey",
                "kms:Encrypt",
                "kms:GenerateDataKey*",
                "kms:ReEncrypt*"
              ],
              "Effect": "Allow",
              "Resource": "*"
            },
            {
              "Action": [
                "codebuild:BatchGetBuilds",
                "codebuild:StartBuild",
                "codebuild:StopBuild"
              ],
              "Effect": "Allow",
              "Resource": "*"
            },
            {
              "Action": [
                "kms:Decrypt",
                "kms:Encrypt",
                "kms:GenerateDataKey*",
                "kms:ReEncrypt*"
              ],
              "Effect": "Allow",
              "Resource": "*"
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "DevOpsRoleDefaultPolicy",
        "Roles": [
          {
            "Ref": "devOpsRole"
          }
        ]
      }
    },
    "lambdaRole":{
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/AWSCodeDeployFullAccess",
          "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        ],
        "RoleName": "LambdaRole-Builders"
      }
    },
    "LambdaRoleDefaultPolicy": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "logs:CreateLogGroup",
                "logs:CreateLogStream",
                "logs:PutLogEvents"
              ],
              "Effect": "Allow",
              "Resource": "*"
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "LambdaRoleDefaultPolicy",
        "Roles": [
          {
            "Ref": "lambdaRole"
          }
        ]
      }
    },
    "clusterDemogo": {
      "Type": "AWS::ECS::Cluster"
    },
    "ECRDemogo": {
      "Type": "AWS::ECR::Repository",
      "Properties": {
        "RepositoryName": "builders-app"
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain"
    },
    "taskDefApp": {
      "Type": "AWS::ECS::TaskDefinition",
      "Properties": {
        "ContainerDefinitions": [
          {
            "Essential": true,
            "Image": {
              "Fn::Join": [
                "",
                [
                  {
                    "Fn::Select": [
                      4,
                      {
                        "Fn::Split": [
                          ":",
                          {
                            "Fn::GetAtt": [
                              "ECRDemogo",
                              "Arn"
                            ]
                          }
                        ]
                      }
                    ]
                  },
                  ".dkr.ecr.",
                  {
                    "Fn::Select": [
                      3,
                      {
                        "Fn::Split": [
                          ":",
                          {
                            "Fn::GetAtt": [
                              "ECRDemogo",
                              "Arn"
                            ]
                          }
                        ]
                      }
                    ]
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  },
                  "/",
                  {
                    "Ref": "ECRDemogo"
                  },
                  ":latest"
                ]
              ]
            },
            "LogConfiguration": {
              "LogDriver": "awslogs",
              "Options": {
                "awslogs-group": {
                  "Ref": "appTaskDefLogGroup"
                },
                "awslogs-stream-prefix": "ecs/builders-app",
                "awslogs-region": {
                  "Ref" : "AWS::Region"
                }
              }
            },
            "Name": "app",
            "PortMappings": [
              {
                "ContainerPort": 8080,
                "HostPort": 8080,
                "Protocol": "tcp"
              }
            ]
          }
        ],
        "Cpu": "512",
        "ExecutionRoleArn": {
          "Fn::GetAtt": [
            "devOpsRole",
            "Arn"
          ]
        },
        "Family": "taskDefApp",
        "Memory": "1024",
        "NetworkMode": "awsvpc",
        "RequiresCompatibilities": [
          "FARGATE"
        ],
        "TaskRoleArn": {
          "Fn::GetAtt": [
            "devOpsRole",
            "Arn"
          ]
        }
      }
    },
    "appTaskDefLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain"
    },
    "appServiceSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "App Service Security Group",
        "SecurityGroupEgress": [
          {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1"
          }
        ],
        "VpcId": {
          "Ref": "vpcDemogo"
        }
      }
    },
    "appServiceSecurityGroupIngress": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "IpProtocol": "tcp",
        "Description": "Load balancer to target",
        "FromPort": 8080,
        "GroupId": {
          "Fn::GetAtt": [
            "appServiceSecurityGroup",
            "GroupId"
          ]
        },
        "SourceSecurityGroupId": {
          "Fn::GetAtt": [
            "publicALBSecurityGroup",
            "GroupId"
          ]
        },
        "ToPort": 8080
      }
    }
  }
}